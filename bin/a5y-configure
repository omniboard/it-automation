#!/usr/bin/env ruby

require 'ahalogy/install-helper'
require 'colorize'
require 'command'
require 'daybreak'
require 'github_api'
require 'highline/import'
require 'optparse'

fail 'This script should run as root using sudo.' unless ENV['USER'] == 'root'
user_name = ENV['SUDO_USER']
user_uid = ENV['SUDO_UID']
user_gid = ENV['SUDO_GID']
fail 'Environment variables for SUDO_UID and SUDO_GID are invalid' if user_uid.nil? or user_gid.nil?

groups = [:developer, :pinner, :cs, :designer]
options = {
  groups: [:default],
  verbose: false,
  skip_filevault: false,
  skip_github: false,
}
OptionParser.new do |opts|
  groups.each do |group|
    opts.on("--#{group}", "Install apps for #{group} group.") { options[:groups] << group }
  end
  opts.on('--all', 'Install all group apps.') { options[:groups] += groups }
  opts.on('-l', '--list', 'List available groups.') do
    puts "Available groups: #{groups.join(', ')}"
    exit
  end
  opts.on('--skip-filevault', 'Skip configuration of FileVault.') { options[:skip_filevault] = true }
  opts.on('--skip-github', 'Skip configuration of GitHub sshkey') { options[:skip_github] = true }
  opts.on('-a', '--ask', 'Ask to confirm settings stored in settings database.') { options[:ask] = true }
  opts.on('--xcode FILE', 'Use local xcode dmg file for install.') { |file| options[:xcode] = file }
  opts.on('-d', '--debug', 'Enable debug messaging.') { options[:verbose] = true }
  opts.on('-b', '--battery', 'Enable battery mode.') { options[:battery_mode] = true }
end.parse!

# Open settings database
db = Daybreak::DB.new File.expand_path('~/.ahalogy.db'), default: ''
# Verify values are already in the database or ask for them
unless options[:skip_github]
  if options[:ask] or db[:github_username].empty?
    db[:github_username] = ask('GitHub Username? (leave blank to skip or if you have 2FA enabled...)')
  end
  if !db[:github_username].empty? and (options[:ask] or db[:github_password].empty?)
    db[:github_password] = ask('GitHub Password?') { |q| q.echo = 'x' }
  end
end

db.flush # Write changes to disk.

notes = []

begin
  if options[:groups].include? :default
    
    # Enable Battery Mode
    if options[:battery_mode]
      # Turns off Sleep and DisplaySleep
      run_cmd 'sudo pmset -a displaysleep 0 disksleep 0 sleep 0', 'Disabling sleep.'
    end
    # Install xcode command line tools
    system('xcode-select -v')
    if $? != 0
      run_cmd 'xcode-select --install', 'Installing Xcode CLI tools.'
    else
      puts 'Xcode CLI tools is already installed...skipped.'.colorize(:green)
    end

    # Enable FileVault
    unless options[:skip_filevault]
      begin
        run_cmd "fdesetup enable -user #{user_name}", 'Enabling FileVault... (skip by re-running script with --skip-filevault)'
        notes << 'FileVault was enabled. You will need to reboot to start the encryption process.'
      rescue
        puts 'FileVault already enabled...skipped'.colorize(:green)
      end
    end

    # Install full xcode
    system 'xcodebuild &> /dev/null'
    case $?.exitstatus
    when 1
      command = Command.run("xcode-select --install")
      fail "Xcode installer failed." unless command.status == 0
    when 69
      install_file 'com.apple.dt.Xcode.plist', '/Library/Preferences/com.apple.dt.Xcode.plist'
    end

    # Enable system firewall
    run_cmd 'defaults write /Library/Preferences/com.apple.alf globalstate -int 1', 'Enabling firewall.'

    # A few more random things to do while we are still root
    # TODO: Clean this up

    # Make some directories so HomeBrew installer doesn't need sudo
    mkdir '/usr/local', mode: 0775
    mkdir '/Library/Caches/Homebrew', mode: 0775

    # Make Caskroom for brew cask so it doesn't need sudo to do it.
    mkdir '/opt', mode: 0755
    mkdir '/opt/homebrew-cask', owner: user_name, group: user_gid
    mkdir '/opt/homebrew-cask/Caskroom', owner: user_name, group: user_gid

    if options[:groups].include? :developer
      # Set the user shell here before we drop privs so oh-my-zsh installer doesn't ask for password
      Command.run "chsh -s /bin/zsh #{user_name}"
      # Setup rbenv
      run_cmd "grep -q -F 'export RBENV_ROOT=/usr/local/var/rbenv' /etc/profile || echo 'export RBENV_ROOT=/usr/local/var/rbenv' >> /etc/profile", 'Adding RBENV_ROOT to /etc/profile...'
      run_cmd "grep -q -F 'rbenv init -' /etc/profile || echo 'eval \"$(rbenv init -)\"' >> /etc/profile", 'Adding rbenv init to /etc/profile...'
      mkdir '/usr/local/var/rbenv/plugins'
      if File.exists? '/usr/local/var/rbenv/plugins/rbenv-gem-rehash'
        puts 'rbenv-gem-rehash already installed...skipped.'.colorize(:green)
      else
        run_cmd 'git clone https://github.com/sstephenson/rbenv-gem-rehash.git /usr/local/var/rbenv/plugins/rbenv-gem-rehash', 'Installing rbenv-gem-rehash...'
      end
    end

    # Dropping privileges to the sudo_user
    Process::Sys.setuid(user_name)

    unless options[:skip_github]
      # Let's setup our sshkey and github
      if File.exists? File.expand_path('~/.ssh/id_rsa')
        puts 'sshkey exists... skipped.'.colorize(:green)
      else
        run_cmd "ssh-keygen -f ~/.ssh/id_rsa -N ''", 'Generating sshkey.'
      end
      unless db[:github_username].empty?
        local_key = File.read(File.expand_path('~/.ssh/id_rsa.pub')).split[0...-1].join(' ')
        github = Github.new basic_auth: "#{db[:github_username]}:#{db[:github_password]}"
        unless github
          puts 'Authenication with GitHub failed.'.colorize(:red)
          puts 'If this is because you have previously entered the wrong username or password, re-run the script with the --ask argument.'
          fail
        end
        upload_key = true
        github.users.keys.list.each do |entry|
          upload_key = false if entry[:key] == local_key
        end
        if upload_key
          github.users.keys.create title: 'uploaded via ahalogy-automation', key: local_key
        else
          puts 'SSH Key already installed on GitHub...skipped.'.colorize(:green)
        end
      end
      run_cmd 'sudo srm -f -m ~/.ahalogy.db', 'Sanitizing database...'
    end

    # Install homebrew
    if File.exists? '/usr/local/bin/brew'
      puts 'Homebrew already installed...skipped.'.colorize(:green)
    else
      run_cmd 'echo | ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"', "Installing homebrew."
      run_cmd 'brew doctor', 'Verifying Homebrew Install...'
    end

    puts '*** STARTING APP INSTALLATION... NO FURTHER INPUT REQUIRED (hopefully) ***'.colorize(:red)

    # Tap casks
    run_cmd 'brew install caskroom/cask/brew-cask', 'Installing brew-cask...'
    run_cmd 'brew tap caskroom/cask', 'Tapping caskroom/cask...'
    run_cmd 'brew tap caskroom/fonts', 'Tapping caskroom/fonts...'
    run_cmd 'brew tap caskroom/versions', 'Tapping caskroom/versions...'
    run_cmd 'brew tap homebrew/dupes', 'Tapping homebrew/dupes...'
    run_cmd 'brew tap homebrew/versions', 'Tapping homebrew/versions...'

    ### Install Applications
    # Apps via Brew
    install_brew [:git, :python, :python3, :cassandra, :macvim]
    #install_brew 'macvim', '--override-system-vim --with-python3'
    # Apps via Cask
    install_cask [:backblaze, :slack, 'github-desktop', 'google-chrome', 'google-drive', :screenhero, :textmate, :zoomus]
    # BackBlaze
    notes << "If this is the first run of the Ahalogy installer script, you will need to install BackBlaze by running:\n     open '/opt/homebrew-cask/Caskroom/backblaze/latest/Backblaze Installer.app'"
    # MacVim
    install_file 'vimrc', '~/.vimrc'
    if File.directory? File.expand_path('~/.vim/bundle/Vundle.vim')
      run_cmd 'cd ~/.vim/bundle/Vundle.vim && git pull', 'Updating Vundle via GitHub...'
    else
      run_cmd 'git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim', 'Installing Vundle via GitHub...'
    end
    run_cmd 'vim +BundleClean +BundleInstall +qall', 'Configuring Vundle...'
  end # options[:groups] = default

  if options[:groups].include? :developer
    puts "### Starting installation of developer apps... ###"
    run_cmd 'sudo pmset -a sleep 0', 'Disabling Sleep'
    install_brew [:node, :phantomjs, :postgresql, :redis, 'ruby-build', :nvm, :pow, :rbenv]
    install_cask ['1password', :alfred, :anvil, :dash, :tower]
    # Setup cql
    run_cmd 'pip install cql &> /dev/null', 'Installing cql python module via pip...'
    run_cmd 'pip3 install cql &> /dev/null', 'Installing cql python3 module via pip3...'
    # Setup nvm
    mkdir '~/.nvm'
    add_line_to_file '~/.zshrc', 'export NVM_DIR=~/.nvm'
    add_line_to_file '~/.zshrc', 'source $(brew --prefix nvm)/nvm.sh'
    # install ember-cli
    run_cmd 'npm install -g bower', 'Installing bower...'
    run_cmd 'npm install -g ember-cli', 'Installing ember-cli...'
    # Setup pow
    unless File.directory? File.expand_path('~/Library/Application Support/Pow/Hosts')
      run_cmd 'mkdir -p ~/Library/Application\ Support/Pow/Hosts', 'Creating support directory for pow hosts...'
    end
    unless File.symlink? File.expand_path('~/.pow')
      run_cmd 'ln -s ~/Library/Application\ Support/Pow/Hosts ~/.pow', 'Symlinking pow hosts directory to ~/.pow ...'
    end
    notes << "You will need to run the following commands to setup port 80 forwarding for pow:\n     sudo pow --install-system\n     pow --install-local"
    notes << "You will need to run the following commands if you want pow to start on boot:\n     sudo launchctl load -w /Library/LaunchDaemons/cx.pow.firewall.plist\n     launchctl load -w ~/Library/LaunchAgents/cx.pow.powd.plist"
    # OH MY ZSH!
    unless File.directory? File.expand_path('~/.oh-my-zsh')
      run_cmd 'curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh', 'Installing oh-my-zsh...'
    end
    # Set the default terminal theme to something more bareable.
    #run_cmd 'defaults write com.apple.Terminal "Default Window Settings" "Pro"'
  end # options[:groups] = developer

  if options[:groups].include? :pinner
    install_cask ['adobe-creative-cloud', 'microsoft-office', :joinme]
    notes << "If this is the first time running a5y-configure, you will need to manually install Adobe Creative Cloud by running:\n     open '/opt/homebrew-cask/Caskroom/adobe-creative-cloud/latest/Creative Cloud Installer.app'"
  end

  if options[:groups].include? :cs
    install_cask 'microsoft-office'
  end

  if options[:groups].include? :designer
    run_cmd 'sudo pmset -a sleep 0', 'Disabling Sleep'
    install_cask ['adobe-creative-cloud', 'sketch-tool', :invisionsync, :tower, :anvil]
    notes << "If this is the first time running a5y-configure, you will need to manually install Adobe Creative Cloud by running:\n     open '/opt/homebrew-cask/Caskroom/adobe-creative-cloud/latest/Creative Cloud Installer.app'"
  end
  
  # Sets power settings to default profiles
  if options[:battery_mode]
    unless options[:groups].include? :developer
      run_cmd 'pmset -c 2 -b 1 -u 1', 'Restoring sleep defaults.'
    end
  end

rescue
  raise
ensure
  db.close
end

unless notes.empty?
  puts '### Installer Notes ###'.colorize(:red)
  notes.each_with_index do |note, index|
    puts "#{index + 1}. #{note}"
  end
end
